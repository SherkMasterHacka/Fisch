-- Wave Hub Style UI Library for Roblox - Enhanced Version
-- Modern dark theme UI library with settings page and simplified usage

local UILibrary = {}
UILibrary.__index = UILibrary

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Color scheme matching Wave Hub style
local Colors = {
    Background = Color3.fromRGB(20, 25, 35),
    SidebarBg = Color3.fromRGB(15, 20, 28),
    CardBg = Color3.fromRGB(25, 30, 42),
    Primary = Color3.fromRGB(64, 150, 255),
    Secondary = Color3.fromRGB(120, 120, 140),
    Text = Color3.fromRGB(220, 220, 230),
    TextSecondary = Color3.fromRGB(160, 160, 170),
    Border = Color3.fromRGB(40, 45, 60),
    Success = Color3.fromRGB(80, 200, 120),
    Warning = Color3.fromRGB(255, 180, 60),
    Error = Color3.fromRGB(255, 100, 100)
}

-- Settings storage
local Settings = {
    ThemeColor = Colors.Primary,
    AnimationSpeed = 0.2,
    UIScale = 1,
    ShowNotifications = true,
    AutoSave = true
}

-- Animation settings
local AnimationInfo = TweenInfo.new(Settings.AnimationSpeed, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

function UILibrary.new(title)
    local self = setmetatable({}, UILibrary)
    self.title = title or "Wave Hub"
    self.tabs = {}
    self.currentTab = nil
    self.elements = {}
    
    self:CreateMainFrame()
    self:CreateSettingsTab()
    self:CreateNotificationSystem()
    return self
end

-- Easy usage method
function UILibrary:CreateWindow(title)
    return UILibrary.new(title)
end

function UILibrary:CreateMainFrame()
    -- Main ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "WaveHubUI"
    self.ScreenGui.ResetOnSpawn = false
    self.ScreenGui.Parent = PlayerGui
    
    -- Main Frame
    self.MainFrame = Instance.new("Frame")
    self.MainFrame.Name = "MainFrame"
    self.MainFrame.Size = UDim2.new(0, 800, 0, 500)
    self.MainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
    self.MainFrame.BackgroundColor3 = Colors.Background
    self.MainFrame.BorderSizePixel = 0
    self.MainFrame.Parent = self.ScreenGui
    
    -- Corner rounding
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = self.MainFrame
    
    self:CreateSidebar()
    self:CreateContentArea()
    self:MakeDraggable()
end

function UILibrary:CreateSidebar()
    self.Sidebar = Instance.new("Frame")
    self.Sidebar.Name = "Sidebar"
    self.Sidebar.Size = UDim2.new(0, 200, 1, 0)
    self.Sidebar.Position = UDim2.new(0, 0, 0, 0)
    self.Sidebar.BackgroundColor3 = Colors.SidebarBg
    self.Sidebar.BorderSizePixel = 0
    self.Sidebar.Parent = self.MainFrame
    
    local sidebarCorner = Instance.new("UICorner")
    sidebarCorner.CornerRadius = UDim.new(0, 8)
    sidebarCorner.Parent = self.Sidebar
    
    -- Title with status dot
    local titleFrame = Instance.new("Frame")
    titleFrame.Name = "TitleFrame"
    titleFrame.Size = UDim2.new(1, 0, 0, 60)
    titleFrame.BackgroundTransparency = 1
    titleFrame.Parent = self.Sidebar
    
    local statusDot = Instance.new("Frame")
    statusDot.Name = "StatusDot"
    statusDot.Size = UDim2.new(0, 8, 0, 8)
    statusDot.Position = UDim2.new(0, 20, 0, 26)
    statusDot.BackgroundColor3 = Settings.ThemeColor
    statusDot.BorderSizePixel = 0
    statusDot.Parent = titleFrame
    
    local dotCorner = Instance.new("UICorner")
    dotCorner.CornerRadius = UDim.new(0, 4)
    dotCorner.Parent = statusDot
    
    self.StatusDot = statusDot
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, -40, 0, 30)
    titleLabel.Position = UDim2.new(0, 35, 0, 15)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = self.title
    titleLabel.TextColor3 = Colors.Text
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = titleFrame
    
    local subtitle = Instance.new("TextLabel")
    subtitle.Name = "Subtitle"
    subtitle.Size = UDim2.new(1, -40, 0, 15)
    subtitle.Position = UDim2.new(0, 35, 0, 35)
    subtitle.BackgroundTransparency = 1
    subtitle.Text = "Build - Premium | Universal"
    subtitle.TextColor3 = Colors.TextSecondary
    subtitle.TextSize = 12
    subtitle.TextXAlignment = Enum.TextXAlignment.Left
    subtitle.Font = Enum.Font.Gotham
    subtitle.Parent = titleFrame
    
    -- Tab container
    self.TabContainer = Instance.new("ScrollingFrame")
    self.TabContainer.Name = "TabContainer"
    self.TabContainer.Size = UDim2.new(1, 0, 1, -60)
    self.TabContainer.Position = UDim2.new(0, 0, 0, 60)
    self.TabContainer.BackgroundTransparency = 1
    self.TabContainer.BorderSizePixel = 0
    self.TabContainer.ScrollBarThickness = 4
    self.TabContainer.ScrollBarImageColor3 = Colors.Border
    self.TabContainer.Parent = self.Sidebar
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 2)
    tabLayout.Parent = self.TabContainer
end

function UILibrary:CreateContentArea()
    self.ContentArea = Instance.new("Frame")
    self.ContentArea.Name = "ContentArea"
    self.ContentArea.Size = UDim2.new(1, -200, 1, 0)
    self.ContentArea.Position = UDim2.new(0, 200, 0, 0)
    self.ContentArea.BackgroundTransparency = 1
    self.ContentArea.Parent = self.MainFrame
end

function UILibrary:CreateTab(name, icon)
    local tab = {
        name = name,
        icon = icon or "üè†",
        elements = {},
        frame = nil,
        button = nil
    }
    
    -- Tab button
    tab.button = Instance.new("TextButton")
    tab.button.Name = name .. "Tab"
    tab.button.Size = UDim2.new(1, -10, 0, 40)
    tab.button.Position = UDim2.new(0, 5, 0, 0)
    tab.button.BackgroundColor3 = Colors.SidebarBg
    tab.button.BorderSizePixel = 0
    tab.button.Text = ""
    tab.button.Parent = self.TabContainer
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = tab.button
    
    -- Tab icon and text
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Name = "Icon"
    iconLabel.Size = UDim2.new(0, 20, 0, 20)
    iconLabel.Position = UDim2.new(0, 15, 0, 10)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = tab.icon
    iconLabel.TextColor3 = Colors.TextSecondary
    iconLabel.TextSize = 16
    iconLabel.Font = Enum.Font.Gotham
    iconLabel.Parent = tab.button
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.Size = UDim2.new(1, -45, 1, 0)
    textLabel.Position = UDim2.new(0, 40, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = name
    textLabel.TextColor3 = Colors.TextSecondary
    textLabel.TextSize = 14
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.Font = Enum.Font.Gotham
    textLabel.Parent = tab.button
    
    -- Tab content frame
    tab.frame = Instance.new("ScrollingFrame")
    tab.frame.Name = name .. "Content"
    tab.frame.Size = UDim2.new(1, -20, 1, -20)
    tab.frame.Position = UDim2.new(0, 10, 0, 10)
    tab.frame.BackgroundTransparency = 1
    tab.frame.BorderSizePixel = 0
    tab.frame.ScrollBarThickness = 6
    tab.frame.ScrollBarImageColor3 = Colors.Border
    tab.frame.Visible = false
    tab.frame.Parent = self.ContentArea
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 10)
    contentLayout.Parent = tab.frame
    
    -- Update content size for scrolling
    local function updateContentSize()
        local contentSize = contentLayout.AbsoluteContentSize
        tab.frame.CanvasSize = UDim2.new(0, 0, 0, contentSize.Y + 20)
    end
    
    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateContentSize)
    updateContentSize()
    
    -- Tab selection logic
    tab.button.MouseButton1Click:Connect(function()
        self:SelectTab(name)
    end)
    
    -- Hover effects
    tab.button.MouseEnter:Connect(function()
        if self.currentTab ~= name then
            TweenService:Create(tab.button, AnimationInfo, {BackgroundColor3 = Colors.Border}):Play()
        end
    end)
    
    tab.button.MouseLeave:Connect(function()
        if self.currentTab ~= name then
            TweenService:Create(tab.button, AnimationInfo, {BackgroundColor3 = Colors.SidebarBg}):Play()
        end
    end)
    
    self.tabs[name] = tab
    
    -- Select first tab by default
    if not self.currentTab then
        self:SelectTab(name)
    end
    
    return tab
end

function UILibrary:CreateSettingsTab()
    local settingsTab = self:CreateTab("Settings", "‚öôÔ∏è")
    
    -- Theme Settings Section
    local themeSection = self:CreateSection("Settings", "Theme Settings")
    
    -- Theme Color Picker
    self:CreateColorPicker(themeSection, "Theme Color", Settings.ThemeColor, function(color)
        Settings.ThemeColor = color
        self:UpdateTheme()
    end)
    
    -- Animation Speed Slider
    self:CreateSlider(themeSection, "Animation Speed", 0.1, 1, Settings.AnimationSpeed, function(value)
        Settings.AnimationSpeed = value
        AnimationInfo = TweenInfo.new(value, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    end)
    
    -- UI Scale Slider
    self:CreateSlider(themeSection, "UI Scale", 0.8, 1.5, Settings.UIScale, function(value)
        Settings.UIScale = value
        self.MainFrame.Size = UDim2.new(0, 800 * value, 0, 500 * value)
        self.MainFrame.Position = UDim2.new(0.5, -400 * value, 0.5, -250 * value)
    end)
    
    -- General Settings Section
    local generalSection = self:CreateSection("Settings", "General Settings")
    
    self:CreateToggle(generalSection, "Show Notifications", "Enable/disable notification system", Settings.ShowNotifications, function(state)
        Settings.ShowNotifications = state
    end)
    
    self:CreateToggle(generalSection, "Auto Save Settings", "Automatically save settings", Settings.AutoSave, function(state)
        Settings.AutoSave = state
    end)
    
    -- Control Buttons
    local controlSection = self:CreateSection("Settings", "Controls")
    
    self:CreateButton(controlSection, "Reset to Defaults", function()
        self:ResetSettings()
        self:CreateNotification("Settings Reset", "All settings have been reset to defaults!")
    end)
    
    self:CreateButton(controlSection, "Close UI", function()
        self:Destroy()
    end)
end

function UILibrary:SelectTab(name)
    if self.currentTab then
        local oldTab = self.tabs[self.currentTab]
        if oldTab and oldTab.frame then
            oldTab.frame.Visible = false
            TweenService:Create(oldTab.button, AnimationInfo, {BackgroundColor3 = Colors.SidebarBg}):Play()
            local iconObj = oldTab.button:FindFirstChild("Icon")
            local textObj = oldTab.button:FindFirstChild("Text")
            if iconObj then
                TweenService:Create(iconObj, AnimationInfo, {TextColor3 = Colors.TextSecondary}):Play()
            end
            if textObj then
                TweenService:Create(textObj, AnimationInfo, {TextColor3 = Colors.TextSecondary}):Play()
            end
        end
    end
    
    local newTab = self.tabs[name]
    if newTab and newTab.frame then
        newTab.frame.Visible = true
        self.currentTab = name
        TweenService:Create(newTab.button, AnimationInfo, {BackgroundColor3 = Settings.ThemeColor}):Play()
        local iconObj = newTab.button:FindFirstChild("Icon")
        local textObj = newTab.button:FindFirstChild("Text")
        if iconObj then
            TweenService:Create(iconObj, AnimationInfo, {TextColor3 = Colors.Text}):Play()
        end
        if textObj then
            TweenService:Create(textObj, AnimationInfo, {TextColor3 = Colors.Text}):Play()
        end
    end
end

function UILibrary:CreateSection(tabName, title)
    local tab = self.tabs[tabName]
    if not tab then return end
    
    local section = Instance.new("Frame")
    section.Name = title .. "Section"
    section.Size = UDim2.new(1, 0, 0, 0)
    section.BackgroundTransparency = 1
    section.Parent = tab.frame
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Name = "SectionTitle"
    sectionTitle.Size = UDim2.new(1, 0, 0, 30)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = title
    sectionTitle.TextColor3 = Colors.Text
    sectionTitle.TextSize = 20
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Font = Enum.Font.GothamBold
    sectionTitle.Parent = section
    
    local sectionLayout = Instance.new("UIListLayout")
    sectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sectionLayout.Padding = UDim.new(0, 8)
    sectionLayout.Parent = section
    
    -- Update section size based on content
    local function updateSectionSize()
        local contentSize = sectionLayout.AbsoluteContentSize
        section.Size = UDim2.new(1, 0, 0, contentSize.Y)
    end
    
    sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSectionSize)
    spawn(updateSectionSize)
    
    return section
end

-- Simplified methods for easy usage
function UILibrary:AddButton(text, callback)
    if not self.tabs["Main"] then
        self:CreateTab("Main", "üè†")
    end
    
    local mainTab = self.tabs["Main"]
    return self:CreateButton(mainTab.frame, text, callback)
end

function UILibrary:AddToggle(text, callback, defaultValue)
    if not self.tabs["Main"] then
        self:CreateTab("Main", "üè†")
    end
    
    local mainTab = self.tabs["Main"]
    return self:CreateToggle(mainTab.frame, text, nil, defaultValue, callback)
end

function UILibrary:AddSlider(text, min, max, defaultValue, callback)
    if not self.tabs["Main"] then
        self:CreateTab("Main", "üè†")
    end
    
    local mainTab = self.tabs["Main"]
    return self:CreateSlider(mainTab.frame, text, min, max, defaultValue, callback)
end

function UILibrary:AddDropdown(text, options, callback)
    if not self.tabs["Main"] then
        self:CreateTab("Main", "üè†")
    end
    
    local mainTab = self.tabs["Main"]
    return self:CreateDropdown(mainTab.frame, text, options, callback)
end

function UILibrary:AddColorPicker(callback)
    if not self.tabs["Main"] then
        self:CreateTab("Main", "üè†")
    end
    
    local mainTab = self.tabs["Main"]
    return self:CreateColorPicker(mainTab.frame, "Color Picker", Colors.Primary, callback)
end

function UILibrary:CreateToggle(parent, text, description, defaultValue, callback)
    local toggle = Instance.new("Frame")
    toggle.Name = text .. "Toggle"
    toggle.Size = UDim2.new(1, 0, 0, 60)
    toggle.BackgroundColor3 = Colors.CardBg
    toggle.BorderSizePixel = 0
    toggle.Parent = parent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggle
    
    -- Toggle text
    local toggleText = Instance.new("TextLabel")
    toggleText.Name = "ToggleText"
    toggleText.Size = UDim2.new(1, -80, 0, 20)
    toggleText.Position = UDim2.new(0, 15, 0, 10)
    toggleText.BackgroundTransparency = 1
    toggleText.Text = text
    toggleText.TextColor3 = Colors.Text
    toggleText.TextSize = 14
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Font = Enum.Font.GothamMedium
    toggleText.Parent = toggle
    
    -- Description
    if description then
        local desc = Instance.new("TextLabel")
        desc.Name = "Description"
        desc.Size = UDim2.new(1, -80, 0, 15)
        desc.Position = UDim2.new(0, 15, 0, 30)
        desc.BackgroundTransparency = 1
        desc.Text = description
        desc.TextColor3 = Colors.TextSecondary
        desc.TextSize = 12
        desc.TextXAlignment = Enum.TextXAlignment.Left
        desc.Font = Enum.Font.Gotham
        desc.Parent = toggle
    end
    
    -- Toggle switch
    local switchFrame = Instance.new("Frame")
    switchFrame.Name = "Switch"
    switchFrame.Size = UDim2.new(0, 40, 0, 20)
    switchFrame.Position = UDim2.new(1, -55, 0, 20)
    switchFrame.BackgroundColor3 = Colors.Border
    switchFrame.BorderSizePixel = 0
    switchFrame.Parent = toggle
    
    local switchCorner = Instance.new("UICorner")
    switchCorner.CornerRadius = UDim.new(0, 10)
    switchCorner.Parent = switchFrame
    
    local switchKnob = Instance.new("Frame")
    switchKnob.Name = "Knob"
    switchKnob.Size = UDim2.new(0, 16, 0, 16)
    switchKnob.Position = UDim2.new(0, 2, 0, 2)
    switchKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    switchKnob.BorderSizePixel = 0
    switchKnob.Parent = switchFrame
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 8)
    knobCorner.Parent = switchKnob
    
    -- Toggle state
    local isToggled = defaultValue or false
    
    local function updateToggle()
        if isToggled then
            TweenService:Create(switchFrame, AnimationInfo, {BackgroundColor3 = Settings.ThemeColor}):Play()
            TweenService:Create(switchKnob, AnimationInfo, {Position = UDim2.new(0, 22, 0, 2)}):Play()
        else
            TweenService:Create(switchFrame, AnimationInfo, {BackgroundColor3 = Colors.Border}):Play()
            TweenService:Create(switchKnob, AnimationInfo, {Position = UDim2.new(0, 2, 0, 2)}):Play()
        end
        
        if callback then
            callback(isToggled)
        end
    end
    
    -- Initialize
    updateToggle()
    
    -- Click handler
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 1, 0)
    button.BackgroundTransparency = 1
    button.Text = ""
    button.Parent = toggle
    
    button.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        updateToggle()
    end)
    
    return toggle
end

function UILibrary:CreateSlider(parent, text, min, max, defaultValue, callback)
    local slider = Instance.new("Frame")
    slider.Name = text .. "Slider"
    slider.Size = UDim2.new(1, 0, 0, 70)
    slider.BackgroundColor3 = Colors.CardBg
    slider.BorderSizePixel = 0
    slider.Parent = parent
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 8)
    sliderCorner.Parent = slider
    
    local sliderText = Instance.new("TextLabel")
    sliderText.Name = "SliderText"
    sliderText.Size = UDim2.new(0.7, 0, 0, 20)
    sliderText.Position = UDim2.new(0, 15, 0, 10)
    sliderText.BackgroundTransparency = 1
    sliderText.Text = text
    sliderText.TextColor3 = Colors.Text
    sliderText.TextSize = 14
    sliderText.TextXAlignment = Enum.TextXAlignment.Left
    sliderText.Font = Enum.Font.GothamMedium
    sliderText.Parent = slider
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.Size = UDim2.new(0.3, -15, 0, 20)
    valueLabel.Position = UDim2.new(0.7, 0, 0, 10)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(defaultValue or min)
    valueLabel.TextColor3 = Colors.TextSecondary
    valueLabel.TextSize = 14
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.Parent = slider
    
    local track = Instance.new("Frame")
    track.Name = "Track"
    track.Size = UDim2.new(1, -30, 0, 4)
    track.Position = UDim2.new(0, 15, 0, 45)
    track.BackgroundColor3 = Colors.Border
    track.BorderSizePixel = 0
    track.Parent = slider
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 2)
    trackCorner.Parent = track
    
    local fill = Instance.new("Frame")
    fill.Name = "Fill"
    fill.Size = UDim2.new(0, 0, 1, 0)
    fill.BackgroundColor3 = Settings.ThemeColor
    fill.BorderSizePixel = 0
    fill.Parent = track
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 2)
    fillCorner.Parent = fill
    
    local knob = Instance.new("Frame")
    knob.Name = "Knob"
    knob.Size = UDim2.new(0, 12, 0, 12)
    knob.Position = UDim2.new(0, -6, 0, -4)
    knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    knob.BorderSizePixel = 0
    knob.Parent = fill
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(0, 6)
    knobCorner.Parent = knob
    
    table.insert(self.elements, {type = "slider", fill = fill})
    
    local currentValue = defaultValue or min
    local dragging = false
    
    local function updateSlider(value)
        currentValue = math.clamp(value, min, max)
        local percentage = (currentValue - min) / (max - min)
        
        fill.Size = UDim2.new(percentage, 0, 1, 0)
        valueLabel.Text = string.format("%.1f", currentValue)
        
        if callback then
            callback(currentValue)
        end
    end
    
    updateSlider(currentValue)
    
    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local percentage = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percentage
            updateSlider(value)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local percentage = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percentage
            updateSlider(value)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    return slider
end

function UILibrary:CreateButton(parent, text, callback)
    local button = Instance.new("TextButton")
    button.Name = text .. "Button"
    button.Size = UDim2.new(1, 0, 0, 40)
    button.BackgroundColor3 = Settings.ThemeColor
    button.BorderSizePixel = 0
    button.Text = text
    button.TextColor3 = Colors.Text
    button.TextSize = 14
    button.Font = Enum.Font.GothamMedium
    button.Parent = parent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    table.insert(self.elements, {type = "button", element = button})
    
    button.MouseEnter:Connect(function()
        local hoverColor = Color3.new(
            math.min(Settings.ThemeColor.R + 0.1, 1),
            math.min(Settings.ThemeColor.G + 0.1, 1),
            math.min(Settings.ThemeColor.B + 0.1, 1)
        )
        TweenService:Create(button, AnimationInfo, {BackgroundColor3 = hoverColor}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, AnimationInfo, {BackgroundColor3 = Settings.ThemeColor}):Play()
    end)
    
    button.MouseButton1Click:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(1, -4, 0, 36)}):Play()
        spawn(function()
            wait(0.1)
            TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(1, 0, 0, 40)}):Play()
        end)
        
        if callback then
            callback()
        end
    end)
    
    return button
end

function UILibrary:CreateDropdown(parent, text, options, callback)
    local dropdown = Instance.new("Frame")
    dropdown.Name = text .. "Dropdown"
    dropdown.Size = UDim2.new(1, 0, 0, 50)
    dropdown.BackgroundColor3 = Colors.CardBg
    dropdown.BorderSizePixel = 0
    dropdown.Parent = parent
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 8)
    dropdownCorner.Parent = dropdown
    
    local dropdownText = Instance.new("TextLabel")
    dropdownText.Name = "DropdownText"
    dropdownText.Size = UDim2.new(0.5, 0, 0, 20)
    dropdownText.Position = UDim2.new(0, 15, 0, 15)
    dropdownText.BackgroundTransparency = 1
    dropdownText.Text = text
    dropdownText.TextColor3 = Colors.Text
    dropdownText.TextSize = 14
    dropdownText.TextXAlignment = Enum.TextXAlignment.Left
    dropdownText.Font = Enum.Font.GothamMedium
    dropdownText.Parent = dropdown
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.new(0.45, 0, 0, 30)
    dropdownButton.Position = UDim2.new(0.5, 5, 0, 10)
    dropdownButton.BackgroundColor3 = Colors.Background
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Text = options[1] or "Select..."
    dropdownButton.TextColor3 = Colors.Text
    dropdownButton.TextSize = 12
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.Parent = dropdown
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = dropdownButton
    
    local arrow = Instance.new("TextLabel")
    arrow.Name = "Arrow"
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Position = UDim2.new(1, -20, 0, 0)
    arrow.BackgroundTransparency = 1
    arrow.Text = "‚ñº"
    arrow.TextColor3 = Colors.TextSecondary
    arrow.TextSize = 10
    arrow.Font = Enum.Font.Gotham
    arrow.Parent = dropdownButton
    
    local dropdownList = Instance.new("Frame")
    dropdownList.Name = "DropdownList"
    dropdownList.Size = UDim2.new(0.45, 0, 0, 0)
    dropdownList.Position = UDim2.new(0.5, 5, 0, 45)
    dropdownList.BackgroundColor3 = Colors.Background
    dropdownList.BorderSizePixel = 0
    dropdownList.Visible = false
    dropdownList.ZIndex = 10
    dropdownList.Parent = dropdown
    
    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 6)
    listCorner.Parent = dropdownList
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Parent = dropdownList
    
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = "Option" .. i
        optionButton.Size = UDim2.new(1, 0, 0, 25)
        optionButton.BackgroundColor3 = Colors.Background
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = Colors.Text
        optionButton.TextSize = 12
        optionButton.Font = Enum.Font.Gotham
        optionButton.Parent = dropdownList
        
        optionButton.MouseEnter:Connect(function()
            optionButton.BackgroundColor3 = Colors.Border
        end)
        
        optionButton.MouseLeave:Connect(function()
            optionButton.BackgroundColor3 = Colors.Background
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            dropdownButton.Text = option
            dropdownList.Visible = false
            arrow.Text = "‚ñº"
            dropdown.Size = UDim2.new(1, 0, 0, 50)
            
            if callback then
                callback(option)
            end
        end)
    end
    
    local function updateListSize()
        local contentSize = listLayout.AbsoluteContentSize
        dropdownList.Size = UDim2.new(0.45, 0, 0, contentSize.Y)
    end
    
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateListSize)
    updateListSize()
    
    dropdownButton.MouseButton1Click:Connect(function()
        dropdownList.Visible = not dropdownList.Visible
        if dropdownList.Visible then
            arrow.Text = "‚ñ≤"
            dropdown.Size = UDim2.new(1, 0, 0, 50 + dropdownList.AbsoluteSize.Y + 5)
        else
            arrow.Text = "‚ñº"
            dropdown.Size = UDim2.new(1, 0, 0, 50)
        end
    end)
    
    return dropdown
end

function UILibrary:CreateColorPicker(parent, text, defaultColor, callback)
    local colorPicker = Instance.new("Frame")
    colorPicker.Name = text .. "ColorPicker"
    colorPicker.Size = UDim2.new(1, 0, 0, 50)
    colorPicker.BackgroundColor3 = Colors.CardBg
    colorPicker.BorderSizePixel = 0
    colorPicker.Parent = parent
    
    local pickerCorner = Instance.new("UICorner")
    pickerCorner.CornerRadius = UDim.new(0, 8)
    pickerCorner.Parent = colorPicker
    
    local pickerText = Instance.new("TextLabel")
    pickerText.Name = "PickerText"
    pickerText.Size = UDim2.new(0.7, 0, 0, 20)
    pickerText.Position = UDim2.new(0, 15, 0, 15)
    pickerText.BackgroundTransparency = 1
    pickerText.Text = text
    pickerText.TextColor3 = Colors.Text
    pickerText.TextSize = 14
    pickerText.TextXAlignment = Enum.TextXAlignment.Left
    pickerText.Font = Enum.Font.GothamMedium
    pickerText.Parent = colorPicker
    
    local colorPreview = Instance.new("Frame")
    colorPreview.Name = "ColorPreview"
    colorPreview.Size = UDim2.new(0, 60, 0, 30)
    colorPreview.Position = UDim2.new(1, -75, 0, 10)
    colorPreview.BackgroundColor3 = defaultColor
    colorPreview.BorderSizePixel = 0
    colorPreview.Parent = colorPicker
    
    local previewCorner = Instance.new("UICorner")
    previewCorner.CornerRadius = UDim.new(0, 6)
    previewCorner.Parent = colorPreview
    
    local pickerButton = Instance.new("TextButton")
    pickerButton.Size = UDim2.new(1, 0, 1, 0)
    pickerButton.BackgroundTransparency = 1
    pickerButton.Text = ""
    pickerButton.Parent = colorPreview
    
    local presetColors = {
        Color3.fromRGB(64, 150, 255),
        Color3.fromRGB(80, 200, 120),
        Color3.fromRGB(255, 100, 100),
        Color3.fromRGB(255, 180, 60),
        Color3.fromRGB(200, 100, 255),
        Color3.fromRGB(100, 255, 255),
        Color3.fromRGB(255, 255, 100),
        Color3.fromRGB(255, 150, 200)
    }
    
    local currentColorIndex = 1
    local currentColor = defaultColor
    
    pickerButton.MouseButton1Click:Connect(function()
        currentColorIndex = currentColorIndex + 1
        if currentColorIndex > #presetColors then
            currentColorIndex = 1
        end
        
        currentColor = presetColors[currentColorIndex]
        colorPreview.BackgroundColor3 = currentColor
        
        if callback then
            callback(currentColor)
        end
    end)
    
    return colorPicker
end

function UILibrary:CreateNotificationSystem()
    self.NotificationFrame = Instance.new("Frame")
    self.NotificationFrame.Name = "NotificationFrame"
    self.NotificationFrame.Size = UDim2.new(0, 300, 1, 0)
    self.NotificationFrame.Position = UDim2.new(1, -320, 0, 20)
    self.NotificationFrame.BackgroundTransparency = 1
    self.NotificationFrame.Parent = self.ScreenGui
    
    local notificationLayout = Instance.new("UIListLayout")
    notificationLayout.SortOrder = Enum.SortOrder.LayoutOrder
    notificationLayout.Padding = UDim.new(0, 10)
    notificationLayout.Parent = self.NotificationFrame
end

function UILibrary:CreateNotification(title, message, duration)
    if not Settings.ShowNotifications then return end
    
    duration = duration or 3
    
    local notification = Instance.new("Frame")
    notification.Name = "Notification"
    notification.Size = UDim2.new(1, 0, 0, 80)
    notification.BackgroundColor3 = Colors.CardBg
    notification.BorderSizePixel = 0
    notification.Position = UDim2.new(1, 0, 0, 0)
    notification.Parent = self.NotificationFrame
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 8)
    notifCorner.Parent = notification
    
    local accentBar = Instance.new("Frame")
    accentBar.Name = "AccentBar"
    accentBar.Size = UDim2.new(0, 4, 1, 0)
    accentBar.BackgroundColor3 = Settings.ThemeColor
    accentBar.BorderSizePixel = 0
    accentBar.Parent = notification
    
    local accentCorner = Instance.new("UICorner")
    accentCorner.CornerRadius = UDim.new(0, 2)
    accentCorner.Parent = accentBar
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -20, 0, 25)
    titleLabel.Position = UDim2.new(0, 15, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Colors.Text
    titleLabel.TextSize = 14
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = notification
    
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.Size = UDim2.new(1, -20, 0, 35)
    messageLabel.Position = UDim2.new(0, 15, 0, 35)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = message
    messageLabel.TextColor3 = Colors.TextSecondary
    messageLabel.TextSize = 12
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextYAlignment = Enum.TextYAlignment.Top
    messageLabel.TextWrapped = true
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.Parent = notification
    
    TweenService:Create(notification, AnimationInfo, {Position = UDim2.new(0, 0, 0, 0)}):Play()
    
    spawn(function()
        wait(duration)
        TweenService:Create(notification, AnimationInfo, {Position = UDim2.new(1, 0, 0, 0)}):Play()
        wait(0.2)
        notification:Destroy()
    end)
    
    return notification
end

function UILibrary:UpdateTheme()
    if self.StatusDot then
        self.StatusDot.BackgroundColor3 = Settings.ThemeColor
    end
    
    if self.currentTab then
        local tab = self.tabs[self.currentTab]
        if tab and tab.button then
            tab.button.BackgroundColor3 = Settings.ThemeColor
        end
    end
    
    for _, element in ipairs(self.elements) do
        if element.type == "button" then
            element.element.BackgroundColor3 = Settings.ThemeColor
        elseif element.type == "slider" then
            element.fill.BackgroundColor3 = Settings.ThemeColor
        end
    end
end

function UILibrary:ResetSettings()
    Settings.ThemeColor = Color3.fromRGB(64, 150, 255)
    Settings.AnimationSpeed = 0.2
    Settings.UIScale = 1
    Settings.ShowNotifications = true
    Settings.AutoSave = true
    
    AnimationInfo = TweenInfo.new(Settings.AnimationSpeed, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    self.MainFrame.Size = UDim2.new(0, 800, 0, 500)
    self.MainFrame.Position = UDim2.new(0.5, -400, 0.5, -250)
    
    self:UpdateTheme()
end

function UILibrary:MakeDraggable()
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    self.MainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

function UILibrary:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

-- Return the library
return UILibrary
